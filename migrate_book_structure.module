<?php

/**
 * @file
 *
 * Book structure D7 Migration.
 */


function drush_migrate_book_structure_post_migrate_book_hierarchy() {

  list($map, $reverse_map) = _migrate_book_structure_get_migrate_map();

  $source_books_results = Database::getConnection('default', drush_get_option('dbconnection'))
    ->select('book', 'b')
    ->fields('b', array('mlid', 'nid', 'bid'))
    ->execute()->fetchAll();
  $source_books = array();

  $source_book_pages_by_nid = array();
  $source_book_pages_by_mlid = array();
  foreach ($source_books_results as $book_result) {
    $source_book_pages_by_nid[$book_result->nid] = ['bid' => $book_result->bid, 'mlid' => $book_result->mlid];
    $source_book_pages_by_mlid[$book_result->mlid] = ['nid' => $book_result->nid, 'bid' => $book_result->bid];
    // A list of pages for each book.
    $source_books[$book_result->bid][] = $book_result->nid;
  }
  $menu_links_results_query = Database::getConnection('default', drush_get_option('dbconnection'))
    ->select('menu_links', 'ml')
    ->fields('ml', array('mlid', 'plid', 'weight', 'depth'));
  $menu_links_results_query->join('book', 'b', 'ml.mlid = b.mlid');
  $menu_links_results_query->addField('b', 'bid', 'source_book_id');
  $menu_links_results_query->addField('b', 'nid', 'source_book_page_id');

  $menu_links_results = $menu_links_results_query->execute()->fetchAll();

  $source_menu_links = array();
  foreach ($menu_links_results as $menu_link_result) {
    $source_menu_links[$menu_link_result->mlid] = $menu_link_result;
  }

  $max_depth = _migrate_book_structure_get_max_depth();

  for ($depth = 1; $depth <= $max_depth; $depth++) {

    $pages_at_depth_query = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
      ->select('menu_links', 'ml')
      ->fields('ml', array('mlid', 'plid', 'depth', 'weight'))
      ->condition('depth', $depth)
      ->condition('menu_name', 'book-toc-%', 'LIKE');
    $pages_at_depth_query->join('book', 'b', 'ml.mlid = b.mlid');
    $pages_at_depth_query->addField('b', 'bid', 'source_book_id');
    $pages_at_depth_query->addField('b', 'nid', 'source_book_page_id');

    $pages_at_depth = $pages_at_depth_query->execute()->fetchAll();
    // You can't do a join across two database connections.
    foreach ($pages_at_depth as $j => $source_book) {

      $target_book_nid = $reverse_map[$source_book->source_book_page_id];
      $target_book_bid = $reverse_map[$source_book->source_book_id];
      _migrate_book_structure_construct_book_node_with_parent($source_book, $target_book_bid, $target_book_nid, $source_menu_links, $reverse_map, $depth);
    }
  }
}

function _migrate_book_structure_get_file_map($migration_id = FALSE) {
  $filemap_query = Database::getConnection('default', 'default')
    ->select('migrate_map_' . $migration_id . 'file', 'm')
    ->fields('m', array('sourceid1', 'destid1'));
  $filemap_query->join('file_managed', 'f', 'm.destid1 = f.fid');
  $filemap_query->addField('f', 'filename', 'dest_filename');
  $filemap_query->addField('f', 'uri', 'dest_filepath');
  $dest_files_results = $filemap_query->execute()->fetchAll();

  // Index results by fid.
  $dest_files = array();

  $dest_map = array();
  foreach ($dest_files_results as $dest_files_result) {
    $dest_files[$dest_files_result->destid1] = array(
      'dest_filepath' => $dest_files_result->dest_filepath,
      'dest_filename' => $dest_files_result->dest_filename,
      'dest_fid' => $dest_files_result->destid1
    );
    // Make a lookup array for source fid.
    $dest_map[$dest_files_result->destid1] = $dest_files_result->sourceid1;
  }

  $source_files_results = Database::getConnection('default', drush_get_option('dbconnection'))
    ->select('files', 'f')
    ->fields('f', array('fid', 'filename', 'filepath'))
    ->execute()->fetchAll();

  // Index results by fid.
  $source_files = array();
  foreach ($source_files_results as $source_files_result) {
    $source_files[$source_files_result->fid] = array(
      'source_filepath' => $source_files_result->filepath,
      'source_filename' => $source_files_result->filename,
    );
  }

  $file_map = array();
  foreach ($dest_files as $dest_file) {
    $file_map[$dest_file['dest_fid']] = array(
      'source_filename' => $source_files[$dest_map[$dest_file['dest_fid']]]['source_filename'],
      'source_filepath' =>  $source_files[$dest_map[$dest_file['dest_fid']]]['source_filepath'],
      'dest_filename' => $dest_file['dest_filename'],
      'dest_filepath' => $dest_file['dest_filepath'],
    );
  }
  return $file_map;
}

/**
 * @return array
 */
function _migrate_book_structure_get_migrate_map($types = FALSE) {
  $map = array();
  $reverse_map = array();

  $content_types = !empty($types) ? $types : explode(',', drush_get_option('types', 'page,book'));

  foreach ($content_types as $content_type) {
    $map_result = Database::getConnection('default', 'default')
      ->select('migrate_map_' . drush_get_option('migration') . 'node' . $content_type, 'm')
      ->fields('m', array('sourceid1', 'destid1'))
      ->execute()->fetchAll();
    foreach ($map_result as $map_value) {
      $map[$map_value->destid1] = $map_value->sourceid1;
      $reverse_map[$map_value->sourceid1] = $map_value->destid1;
    }
  }
  return array($map, $reverse_map);
}

/**
 * Return the deepest level that any book hierarchy goes in the site.
 *
 * @return mixed
 *   The depth, starting from 1.
 */
function _migrate_book_structure_get_max_depth() {
  $max_depth_query = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
    ->select('menu_links', 'ml')
    ->condition('menu_name', 'book-toc-%', 'LIKE');
  $max_depth_query->addExpression('MAX(depth)');

  return $max_depth_query->execute()->fetchAll()[0]->expression;
}

/**
 * Populate the book node's parent information in the appropriate menu.
 *
 * @param $source_book
 * @param $target_book_bid
 * @param $target_book_nid
 * @param array $source_menu_links
 * @param array $reverse_map
 * @param $depth
 * @throws Exception
 */
function _migrate_book_structure_construct_book_node_with_parent($source_book, $target_book_bid, $target_book_nid, array $source_menu_links, array $reverse_map, $depth) {

  $target_book_page_node = node_load($target_book_nid);
  $target_book_page_node->book['nid'] = $target_book_nid;

  $target_book_page_node->book['bid'] = $target_book_bid;
  //$source_mlid = $source_book_pages_by_nid[$source_page]['mlid'];
  $target_book_page_node->book['weight'] = $source_book->weight;
  // get the parent of the source page.
  if ($depth > 1) {
    $source_parent_book_page = $source_menu_links[$source_book->plid]->source_book_page_id;
    $target_parent_book_page = $reverse_map[$source_parent_book_page];
    // Query book table to get target mlid.

    $target_parent_book_mlid_result = Database::getConnection('default', 'default')
      ->select('book', 'b')
      ->fields('b', array('mlid', 'nid'))
      ->condition('nid', $target_parent_book_page, '=')
      ->execute()->fetchAll();

    // Get parent menu link id from target book table.
    $target_book_page_node->book['plid'] = $target_parent_book_mlid_result[0]->mlid;
  }
  _book_update_outline($target_book_page_node);
  node_save($target_book_page_node);

}

/**
 * Scan node body content for absolute links to the old site
 * and do a table lookup to replace them with relative internal
 * links to the migrated nodes.
 */
function drush_migrate_book_structure_post_migrate_internal_links() {
  // Construct a lookup map from the migration tables.
  list($map, $reverse_map) = _migrate_book_structure_get_migrate_map();

  foreach ($map as $nid => $source_nid) {
    $node = node_load($nid);
    $body_items = field_get_items('node', $node, 'body');

    $updated_summary = _migrate_book_structure_replace_urls_in_text($body_items[0]['summary'], $reverse_map);

    $updated_body = _migrate_book_structure_replace_urls_in_text($body_items[0]['value'], $reverse_map);

    if (!drush_get_option('dry-run', FALSE)) {
      $node->body[$node->language][0]['summary'] = $updated_summary;
      $node->body[$node->language][0]['value'] = $updated_body;
      node_save($node);
    }
  }
}

function drush_migrate_book_structure_post_migrate_image_urls() {
  $file_migration = drush_get_option('filemigration') ? drush_get_option('filemigration') : drush_get_option('migration');

  // Construct a lookup map from the migration tables.
  list($map, $reverse_map) = _migrate_book_structure_get_migrate_map();
  $file_map = _migrate_book_structure_get_file_map($file_migration);
  foreach ($map as $nid => $source_nid) {
    $node = node_load($nid);
    $body_items = field_get_items('node', $node, 'body');

    $updated_summary = _migrate_book_structure_replace_image_urls_in_text($body_items[0]['summary'], $file_map);

    $updated_body = _migrate_book_structure_replace_image_urls_in_text($body_items[0]['value'], $file_map);

    if (!drush_get_option('dry-run', FALSE)) {
      $node->body[$node->language][0]['summary'] = $updated_summary;
      $node->body[$node->language][0]['value'] = $updated_body;
      node_save($node);
    }
  }
}



  /**
 * @param $value
 *   String to replace links in.
 * @param $reverse_map
 *   Map of source nids to nids on the new site.
 * @return DomDocument
 */
function _migrate_book_structure_replace_urls_in_text($value, $reverse_map) {
  if (empty($value)) {
    return $value;
  }

  $source_doc = new DomDocument();
  $source_doc->loadHTML($value);

  foreach ($source_doc->getElementsByTagName('a') as $source_link) {
    $source_url = $source_link->getAttribute('href');

    // Link is to an Islandora object
    $repo_slug = strpos($source_url, 'fedora/repository/');
    $node_slug = strpos($source_url, 'cap/node/');

    if ($repo_slug !== FALSE) {
      $repo_slug += strlen('fedora/repository/');
      $path_parts = explode('/', substr($source_url, $repo_slug));
      $pid = $path_parts[0];
      $dsid = $path_parts[1];

      // First part of Islandora URL
      // DSID of '-' is a placeholder for jsut linking to the object.
      $replacement_url = 'islandora/object/' . $pid . ($dsid == '-' || $dsid == null ? '' : '/datastream/' . $dsid . '/view');
      $source_link->setAttribute('href', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }
    elseif ($node_slug !== FALSE) {
      $node_slug += strlen('cap/node/');
      $path_parts = explode('/', substr($source_url, $node_slug));
      $path_parts[0] = $reverse_map[$path_parts[0]];
      $replacement_url = 'node/' . implode('/', $path_parts);
      $source_link->setAttribute('href', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }
    elseif (strpos($source_url, 'http://vre2.upei.ca/cap/') !== FALSE) {
      // Link to CAP site taht is not already covered, assume it's an alias.
      $replacement_url = substr($source_url, strlen('http://vre2.upei.ca/cap/'));
      $source_link->setAttribute('href', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }
    elseif (strpos($source_url, 'http://www.islandlives.ca/fedora/ilives/') !== FALSE) {
      // Update outdated Island Lives links
      $pid = explode('/', substr($source_url, strlen('http://www.islandlives.ca/fedora/ilives/')))[0];
      $replacement_url = 'https://www.islandlives.ca/islandora/object/' . $pid;
      $source_link->setAttribute('href', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }
    elseif (strpos($source_url, 'http://www.islandlives.ca/fedora/ilives_book_viewer/') !== FALSE) {
      // Update outdated Island Lives links
      $pid = explode('/', substr($source_url, strlen('http://www.islandlives.ca/fedora/ilives_book_viewer/')))[0];
      $replacement_url = 'https://www.islandlives.ca/islandora/object/' . $pid;
      $source_link->setAttribute('href', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }
    else {
      drupal_set_message('Unprocessed link URL: ' . $source_url, 'status');
    }
  }
  return $source_doc->saveHTML();
}

function _migrate_book_structure_replace_image_urls_in_text($value, $file_list) {

  $source_doc = new DomDocument();
  $source_doc->loadHTML($value);

  foreach ($source_doc->getElementsByTagName('img') as $source_link) {
    $source_url = $source_link->getAttribute('src');
    $replacement_uri = _migrate_book_structure_get_new_file_url($source_url, $file_list);
    if ($wrapper = file_stream_wrapper_get_instance_by_uri($replacement_uri)) {

      $replacement_url = '/' . $wrapper->getDirectoryPath() . '/' . file_uri_target($replacement_uri);
      $source_link->setAttribute('src', $replacement_url);
      drupal_set_message("Replace $source_url with $replacement_url.", "status");
    }

//    else {
//      drupal_set_message('Unprocessed link URL: ' . $source_url, 'status');
//    }
  }
  return $source_doc->saveHTML();
}

function _migrate_book_structure_get_new_file_url($source_url, $file_list) {
  // TODO: This is O(n^2), should be made more efficient.
  foreach ($file_list as $file) {
    if (strpos($source_url, $file['source_filepath']) !== FALSE) {
      return $file['dest_filepath'];
    }
  }
}