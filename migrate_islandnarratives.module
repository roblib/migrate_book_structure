<?php

/**
 * @file
 *
 * Island Narratives D7 Migration.
 */


function drush_migrate_islandnarratives_post_migrate_book_hierarchy() {

  list($map, $reverse_map) = islandnarratives_migrate_get_node_map();

  $source_books_results = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
    ->select('book', 'b')
    ->fields('b', array('mlid', 'nid', 'bid'))
    ->execute()->fetchAll();
  $source_books = array();

  $source_book_pages_by_nid = array();
  $source_book_pages_by_mlid = array();
  foreach ($source_books_results as $book_result) {
    $source_book_pages_by_nid[$book_result->nid] = ['bid' => $book_result->bid, 'mlid' => $book_result->mlid];
    $source_book_pages_by_mlid[$book_result->mlid] = ['nid' => $book_result->nid, 'bid' => $book_result->bid];
    // A list of pages for each book.
    $source_books[$book_result->bid][] = $book_result->nid;
  }
  $menu_links_results_query = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
    ->select('menu_links', 'ml')
    ->fields('ml', array('mlid', 'plid', 'weight', 'depth'));
  $menu_links_results_query->join('book', 'b', 'ml.mlid = b.mlid');
  $menu_links_results_query->addField('b', 'bid', 'source_book_id');
  $menu_links_results_query->addField('b', 'nid', 'source_book_page_id');

  $menu_links_results = $menu_links_results_query->execute()->fetchAll();

  $source_menu_links = array();
  foreach ($menu_links_results as $menu_link_result) {
    $source_menu_links[$menu_link_result->mlid] = $menu_link_result;
  }

  $max_depth = _islandnarratives_book_get_max_depth();

  for ($depth = 1; $depth <= $max_depth; $depth++) {

    $pages_at_depth_query = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
      ->select('menu_links', 'ml')
      ->fields('ml', array('mlid', 'plid', 'depth', 'weight'))
      ->condition('depth', $depth)
      ->condition('menu_name', 'book-toc-%', 'LIKE');
    $pages_at_depth_query->join('book', 'b', 'ml.mlid = b.mlid');
    $pages_at_depth_query->addField('b', 'bid', 'source_book_id');
    $pages_at_depth_query->addField('b', 'nid', 'source_book_page_id');

    $pages_at_depth = $pages_at_depth_query->execute()->fetchAll();
    // You can't do a join across two database connections.
    foreach ($pages_at_depth as $j => $source_book) {

      $target_book_nid = $reverse_map[$source_book->source_book_page_id];
      $target_book_bid = $reverse_map[$source_book->source_book_id];
      _construct_book_node_with_parent($source_book, $target_book_bid, $target_book_nid, $map, $source_book_pages_by_nid, $source_menu_links, $reverse_map, $depth);
    }
  }
}

/**
 * @return array
 */
function islandnarratives_migrate_get_node_map() {
  $map = array();
  $reverse_map = array();

  $content_types = explode(',', drush_get_option('types', 'page,book'));

  foreach ($content_types as $content_type) {
    $map_result = Database::getConnection('default', 'default')
      ->select('migrate_map_' . drush_get_option('migration') . 'node' . $content_type, 'm')
      ->fields('m', array('sourceid1', 'destid1'))
      ->execute()->fetchAll();
    foreach ($map_result as $map_value) {h
      $map[$map_value->destid1] = $map_value->sourceid1;
      $reverse_map[$map_value->sourceid1] = $map_value->destid1;
    }
  }
  return array($map, $reverse_map);
}

function _islandnarratives_book_get_max_depth() {
  $max_depth_query = Database::getConnection('default', drush_get_option('dbconnection', 'cap'))
    ->select('menu_links', 'ml')
    //->fields('ml', array('depth'))
    ->condition('menu_name', 'book-toc-%', 'LIKE');
  $max_depth_query->addExpression('MAX(depth)');

  return $max_depth_query->execute()->fetchAll()[0]->expression;
}

/**
 * @param array $target_book_pages
 * @param array $map
 * @param array $source_book_pages_by_nid
 * @param array $source_menu_links
 * @param array $reverse_map
 * @throws Exception
 */
function _construct_book_node_with_parent($source_book, $target_book_bid, $target_book_nid, array $map, array $source_book_pages_by_nid, array $source_menu_links, array $reverse_map, $depth) {

  $target_book_page_node = node_load($target_book_nid);
  $target_book_page_node->book['nid'] = $target_book_nid;

  $target_book_page_node->book['bid'] = $target_book_bid;
  //$source_mlid = $source_book_pages_by_nid[$source_page]['mlid'];
  $target_book_page_node->book['weight'] = $source_book->weight;
  // get the parent of the source page.
  if ($depth > 1) {
    $source_parent_book_page = $source_menu_links[$source_book->plid]->source_book_page_id;
    $target_parent_book_page = $reverse_map[$source_parent_book_page];
    // Query book table to get target mlid.

    $target_parent_book_mlid_result = Database::getConnection('default', 'default')
      ->select('book', 'b')
      ->fields('b', array('mlid', 'nid'))
      ->condition('nid', $target_parent_book_page, '=')
      ->execute()->fetchAll();

    // Get parent menu link id from target book table.
    $target_book_page_node->book['plid'] = $target_parent_book_mlid_result[0]->mlid;
  }
  _book_update_outline($target_book_page_node);
  node_save($target_book_page_node);

}

/**
 * Scan node body content for absolute links to the old site
 * and do a table lookup to replace them with relative internal
 * links to the migrated nodes.
 */
function drush_migrate_islandnarratives_post_migrate_internal_links() {
  // Construct a lookup map from the migration tables.
  list($map, $reverse_map) = islandnarratives_migrate_get_node_map();

  foreach ($map as $nid => $source_nid) {
    $node = node_load($nid);
    $body_items = field_get_items('node', $node, 'body');

    // Search for a relative or absolute link to node
    // Replace with internal link in /node/xxx format.
    $value = $body_items[0]['value'];

    $source_doc = new DomDocument();
    $source_doc->loadHTML($value);

    foreach ($source_doc->getElementsByTagName('a') as $source_link) {
      $source_url = $source_link->getAttribute('href');

      // Link is to an Islandora object
      $pos = strpos($source_url, 'fedora/repository/');
      if ($pos >= 0) {
        $pos += strlen('fedora/repository/');
        $replacement_url = 'islandora/object/' . substr($source_url, $pos);
      }
    }
  }
}